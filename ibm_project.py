# -*- coding: utf-8 -*-
"""IBM PROJECT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jImYELLpsmnmpI-oE5uyVsSlUmvaGb3Q
"""

import pandas as pd
from sklearn.preprocessing import MinMaxScaler
import numpy as np
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler

data=pd.read_csv('/content/Assignment-1_DataN.csv')
data.head()

data.tail()

data.info()

data.count()

data.BillNo

data.Quantity

data.Price

data.CustomerID

type(data)

data.shape

data['Quantity'].fillna(data['Quantity'].mean(),inplace=True)

data['Price'].fillna(data['Price'].mean(),inplace=True)

data.drop_duplicates(inplace=True)



print(data.isnull().sum())

data = pd.get_dummies(data, columns=['BillNo'], prefix=['BillNo'])

data = pd.get_dummies(data, columns=['Quantity'], prefix=['Quantity'])

data=pd.read_csv('/content/Assignment-1_DataN.csv')
data1=pd.read_csv('/content/Assignment-1_DataM.csv')

data = pd.DataFrame(data)
data1= pd.DataFrame(data1)

merged_data = pd.merge(data, data1, on='BillNo')

print(merged_data)

from mlxtend.frequent_patterns import apriori
from mlxtend.frequent_patterns import association_rules
import numpy as np

# Define the minimum support and confidence
min_support = 0.05
min_confidence = 0.7

datanew=pd.read_csv('/content/dataset_it.csv')
datanew.head()

# Convert the market basket dataset to a binary matrix
binary_matrix = data.to_numpy().astype(bool)
binary_matrix_df = pd.DataFrame(binary_matrix)

# Find the frequent itemsets
frequent_itemsets = apriori(binary_matrix_df, min_support=min_support, use_colnames=True)

association_rules = association_rules(frequent_itemsets, metric="confidence", min_threshold=min_confidence)

association_rules = association_rules.sort_values(by=['confidence', 'support'],ascending=False)

print(association_rules)

"""VISUALIZATION"""

import matplotlib.pyplot as plt
import seaborn as sns

item_counts = datanew.explode('Itemname')['Itemname'].value_counts()
plt.figure(figsize=(6, 6))
sns.barplot(x=item_counts.values, y=item_counts.index)
plt.xlabel('Frequency')
plt.ylabel('Items')
plt.title('Item Frequency Plot')
plt.show()

item_counts = datanew.explode('Itemname')['Itemname'].value_counts()
plt.figure(figsize=(6, 6))
sns.scatterplot(x=item_counts.values, y=item_counts.index)
plt.xlabel('Frequency')
plt.ylabel('Items')
plt.title('Item Frequency Plot')
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Example data - You should replace this with your actual data and analysis results
item1 = ['WHITE HANGING HEART T-LIGHT HOLDER', 'WHITE METAL LANTERN', 'KNITTED UNION FLAG HOT WATER BOTTLE']

item2 = ['RED WOOLLY HOTTIE WHITE HEART', 'SET 7 BABUSHKA NESTING BOXES', 'GLASS STAR FROSTED T-LIGHT HOLDER']
confidence = [0.8, 0.6, 0.7]

# Create a DataFrame with the results
data = pd.DataFrame({'Item1': item1, 'Item2': item2, 'Confidence': confidence})

# Pivot the data to create a matrix for the contour plot
pivot_data = data.pivot('Item1', 'Item2', 'Confidence')

# Create the contour plot using seaborn
plt.figure(figsize=(6, 6))
sns.heatmap(pivot_data, annot=True, cmap='YlGnBu')

# Customize labels and title
plt.xlabel('Item 2')
plt.ylabel('Item 1')
plt.title('Contour Plot for Market Basket Insights')

# Show the plot
plt.show()

import matplotlib.pyplot as plt

# Sample data (replace with your market basket insights)
labels = ['BillNo', 'Quantity', 'Price', 'Country']
sizes = [30, 25, 20, 25]  # Replace with your actual data

# Create a pie chart
plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140)

# Add a title
plt.title('Market Basket Insights')

# Display the pie chart
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()

import seaborn as sns

# Create a heatmap of item-item relationships
item_corr = data.corr()
plt.figure(figsize=(8, 6))
sns.heatmap(item_corr, annot=True, cmap='Blues')
plt.title('Item-Item Correlation Heatmap')
plt.show()

from pandas.plotting import parallel_coordinates

# Example: Plot the first 10 transactions
parallel_coordinates(data.head(10), 'CustomerID')
plt.title('Parallel Coordinates Plot of Market Baskets')
plt.show()

pip install wordcloud

from wordcloud import WordCloud

item_frequency = ' '.join(data['BillNo'].explode().astype(str))
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(item_frequency)
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.title('Market Basket Word Cloud')
plt.show()